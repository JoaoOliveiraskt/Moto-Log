generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Loja {
  id                   String      @id @default(uuid())
  nome                 String
  imagemUrl            String?
  descricao            String?
  imagemFile           String?
  userId               String
  createdAt            DateTime    @default(now()) @db.Timestamp(6)
  endereco             String?
  horarioFuncionamento String?
  telefone             String?
  email                String?     @db.VarChar
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  pedidos              Order[]
  Produtos             Produto[]
  categorias           Categoria[] @relation("CategoriaToLoja")
}

model Categoria {
  id       String    @id @default(uuid())
  nome     String
  imageUrl String
  produtos Produto[]
  lojas    Loja[]    @relation("CategoriaToLoja")
}

model Produto {
  id                  String         @id @default(uuid())
  nome                String
  descricao           String
  imagemUrl           String
  preco               Decimal        @db.Decimal(10, 2)
  porcentagemDesconto Decimal        @db.Decimal(10, 2)
  lojaId              String
  categoriaId         String
  pedidos             OrderProduct[]
  categoria           Categoria      @relation(fields: [categoriaId], references: [id])
  loja                Loja           @relation(fields: [lojaId], references: [id])
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Produto @relation(fields: [productId], references: [id])
}

model Order {
  id            String         @id @default(uuid())
  userId        String
  createdAt     DateTime       @default(now())
  lojaId        String
  deliveryFee   Decimal?       @db.Decimal(10, 2)
  deliveryTime  Int?
  subTotalPrice Decimal        @db.Decimal(10, 2)
  totalPrice    Decimal        @db.Decimal(10, 2)
  totalDiscount Decimal        @db.Decimal(10, 2)
  status        OrderStatus
  address       String?
  loja          Loja           @relation(fields: [lojaId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  products      OrderProduct[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(CLIENT)
  stores        Loja[]
  orders        Order[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  PREPARING
  DELIVERING
  COMPLETED
}

enum Role {
  CLIENT
  LOJISTA
}
